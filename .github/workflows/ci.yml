name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x, 22.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm install
    
    - name: Run linter
      run: npm run lint
    
    - name: Run tests
      run: npm test
      env:
        REDMINE_URL: https://test.redmine.com
        REDMINE_API_KEY: test-api-key
    
    - name: Run build
      run: npm run build
    
    - name: Upload coverage reports
      if: matrix.node-version == '20.x'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        fail_ci_if_error: false

  publish:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        registry-url: 'https://registry.npmjs.org'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm install
    
    - name: Install DXT CLI
      run: npm install -g @modelcontextprotocol/dxt
    
    - name: Build project
      run: npm run build
    
    - name: Build DXT bundle
      run: npm run build:bundle
    
    - name: Validate DXT structure
      run: npm run validate-dxt
    
    - name: Package DXT
      run: dxt pack . redmine-mcp-server.dxt
    
    - name: Check if version changed
      id: version-check
      run: |
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        PUBLISHED_VERSION=$(npm view @gmlee-ncurity/mcp-server-redmine version 2>/dev/null || echo "0.0.0")
        echo "current=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "published=$PUBLISHED_VERSION" >> $GITHUB_OUTPUT
        if [ "$CURRENT_VERSION" != "$PUBLISHED_VERSION" ]; then
          echo "changed=true" >> $GITHUB_OUTPUT
        else
          echo "changed=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Publish to npm
      if: steps.version-check.outputs.changed == 'true'
      run: npm publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
    
    - name: Create GitHub Release
      if: steps.version-check.outputs.changed == 'true'
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version-check.outputs.current }}
        release_name: Release v${{ steps.version-check.outputs.current }}
        body: |
          ## Changes
          - Version bump to ${{ steps.version-check.outputs.current }}
          - All tests passing
          - Successfully published to npm
          - DXT package included for desktop extensions

          ## Installation

          ### NPM Package
          ```bash
          npm install -g @gmlee-ncurity/mcp-server-redmine@${{ steps.version-check.outputs.current }}
          ```

          ### Desktop Extension (DXT)
          Download the `redmine-mcp-server.dxt` file from the assets below and install it in your supported desktop application.

          ðŸ¤– Automated release via GitHub Actions
        draft: false
        prerelease: false
    
    - name: Upload DXT Asset
      if: steps.version-check.outputs.changed == 'true'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./redmine-mcp-server.dxt
        asset_name: redmine-mcp-server.dxt
        asset_content_type: application/octet-stream